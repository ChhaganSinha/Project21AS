@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using Project21AS.Client.Pages.GridButton
@using Project21AS.Client.Client;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AppClient _appClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-sm-12">
            <GridComponent @ref="Component" T="Student" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <div class="col-sm-12" style="margin-top:40vh">
        <div class="loading-bar"></div>
        @* <span class="loader"></span> *@
    </div>
}

@code
{
    private CGrid<Student> _grid;
    private Task _task;
    private static GridComponent<Student> Component;
    static bool filter = true;
    static List<StudentFingerPrintMapping> studentFingerPrintMapping = new();
    static string BaseUri = string.Empty;
    static AuthenticationState authState;

    Action<IGridColumnCollection<Student>> columns = c =>
    {
        // c.Add(o => o.Id).SetWidth("50px").Css("table-bordered").Titled("SN.").Filterable(filter);
        c.Add(o => o.Name).Css("table-bordered").Filterable(filter);
        c.Add(o => o.Batch).Css("table-bordered").Filterable(filter);
        c.Add(o => o.Mobile).Css("table-bordered").Filterable(filter);
        c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        {
            var imageUrl = "/Image/fingerprint-Icon.png";
            var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
            if (file != null && file.FingerPrint1 != "")
            {
                imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint1.Replace(".txt", ".png")}";
            }
            return $"<img src='{imageUrl}' alt='FingerPrint1' width='50' height='50' />";
        }).SetWidth("5px").Css("table-bordered").Titled("Finger1");

        c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        {
            var imageUrl = "/Image/fingerprint-Icon.png";
            var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
            if (file != null && file.FingerPrint2 != "")
            {
                imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint2.Replace(".txt", ".png")}";
            }
            return $"<img src='{imageUrl}' alt='FingerPrint2' width='50' height='50' />";
        }).SetWidth("5px").Css("table-bordered").Titled("Finger2");

        c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        {
            var imageUrl = "/Image/fingerprint-Icon.png";
            var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
            if (file != null && file.FingerPrint3 != "")
            {
                imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint3.Replace(".txt", ".png")}";
            }
            return $"<img src='{imageUrl}' alt='FingerPrint3' width='50' height='50' />";
        }).SetWidth("5px").Css("table-bordered").Titled("Finger3");

        c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        {
            var imageUrl = "/Image/fingerprint-Icon.png";
            var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
            if (file != null && file.FingerPrint4 != "")
            {
                imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint4.Replace(".txt", ".png")}";
            }
            return $"<img src='{imageUrl}' alt='FingerPrint4' width='50' height='50' />";
        }).SetWidth("5px").Css("table-bordered").Titled("Finger4");

        c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        {
            var imageUrl = "/Image/fingerprint-Icon.png";
            var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
            if (file != null && file.FingerPrint5 != "")
            {
                imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint5.Replace(".txt", ".png")}";
            }
            return $"<img src='{imageUrl}' alt='FingerPrint5' width='50' height='50' />";
        }).SetWidth("5px").Css("table-bordered").Titled("Finger5");

        // c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        // {
        //     var imageUrl = "/Image/fingerprint-Icon.png";
        //     var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
        //     if (file != null && file.FingerPrint6 != "")
        //     {
        //         imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint6.Replace(".txt", ".png")}";
        //     }
        //     return $"<img src='{imageUrl}' alt='FingerPrint6' width='50' height='50' />";
        // }).SetWidth("5px").Css("table-bordered").Titled("Finger6");

        // c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        // {
        //     var imageUrl = "/Image/fingerprint-Icon.png";
        //     var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
        //     if (file != null && file.FingerPrint7 != "")
        //     {
        //         imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint7.Replace(".txt", ".png")}";
        //     }
        //     return $"<img src='{imageUrl}' alt='FingerPrint7' width='50' height='50' />";
        // }).SetWidth("5px").Css("table-bordered").Titled("Finger7");

        // c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        // {
        //     var imageUrl = "/Image/fingerprint-Icon.png";
        //     var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
        //     if (file != null && file.FingerPrint8 != "")
        //     {
        //         imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint8.Replace(".txt", ".png")}";
        //     }
        //     return $"<img src='{imageUrl}' alt='FingerPrint8' width='50' height='50' />";
        // }).SetWidth("5px").Css("table-bordered").Titled("Finger8");

        // c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        // {
        //     var imageUrl = "/Image/fingerprint-Icon.png";
        //     var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
        //     if (file != null && file.FingerPrint9 != "")
        //     {
        //         imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint9.Replace(".txt", ".png")}";
        //     }
        //     return $"<img src='{imageUrl}' alt='FingerPrint9' width='50' height='50' />";
        // }).SetWidth("5px").Css("table-bordered").Titled("Finger9");

        // c.Add().Encoded(false).Sanitized(false).RenderValueAs(student =>
        // {
        //     var imageUrl = "/Image/fingerprint-Icon.png";
        //     var file = studentFingerPrintMapping.FirstOrDefault(o => o.Id == student.Id);
        //     if (file != null && file.FingerPrint10 != "")
        //     {
        //         imageUrl = $"{BaseUri}StudentZone/{file.FingerPrint10.Replace(".txt", ".png")}";
        //     }
        //     return $"<img src='{imageUrl}' alt='FingerPrint10' width='50' height='50' />";
        // }).SetWidth("5px").Css("table-bordered").Titled("Finger10");

        //c.Add(o => o.CreatedOn).Css("table-bordered").Format("{0:dd/MM/yyyy}").Filterable(filter);
        // c.Add().Encoded(false).Sanitized(false).RenderComponentAs<StudentViewButton>().SetWidth("50px").Titled("View");
       
        c.Add().Encoded(false).Sanitized(false).RenderComponentAs<StudentEditButton>().SetWidth("50px").Titled("Edit");
        if (string.Equals(authState?.User?.Identity?.Name, "Admin", StringComparison.OrdinalIgnoreCase))
        {
            c.Add().Encoded(false).Sanitized(false).RenderComponentAs<MoveStudentToOtherBatchButton>(new List<Action<object>> { RefreshGrid }).SetWidth("10px").Titled("Move");
        }
        c.Add().Encoded(false).Sanitized(false).RenderComponentAs<StudentDeleteButton>(new List<Action<object>> { RefreshGrid }).SetWidth("10px").Titled("Delete");
    };

    protected override async Task OnParametersSetAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        BaseUri = NavigationManager.BaseUri;
        string url = $"odata/Student";
        var query = new QueryDictionary<StringValues>();
        query.Add("grid-sorting", "Id__1__1");

        var client = new GridODataClient<Student>(HttpClient, url, query, false, "ordersGrid", columns, 5)
            .Sortable(true)
            .Filterable(true)
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .SetExcelExport(true, true, "Students")
            .ChangePageSize(true)
            .EmptyText("No data available")
            .SetKeyboard(true)
            .Searchable(true, false, false);

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;
        studentFingerPrintMapping = new List<StudentFingerPrintMapping>(await _appClient.GetAllStudentFingerPrintMapping());
    }

    public static async void RefreshGrid(object item)
    {
        await Component.UpdateGrid();
    }

    //this function is not in use
    static async Task<string> ReadTextFileFromUrl(string fileUrl)
    {
        using (HttpClient client = new HttpClient())
        {
            HttpResponseMessage response = await client.GetAsync(fileUrl);

            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadAsStringAsync();
            }
            else
            {
                return null;
            }
        }
    }


}